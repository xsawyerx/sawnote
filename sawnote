#!/usr/bin/perl
use strict;
use warnings;
use experimental qw< signatures >;
use Getopt::Long qw< :config no_ignore_case >;

our %CHORDS = (
    'A'  => 'L02220x',
    'Am' => 'L01220x',
    'B'  => 'L24442x',
    'Bm' => 'L23442x',
    'C'  => 'L01023x',
    'Cm' => 'L34553x',
    'D'  => 'L2320xx',
    'Dm' => 'L1320xx',
    'E'  => 'L001220',
    'Em' => 'L000220',
    'F'  => 'L112331',
    'Fm' => 'L111331',
    'G'  => 'L300023',
    'Gm' => 'L333553',
    'A7' => 'L02020x',
    'B7' => 'L20212x',
    'D7' => 'L2120xx',
    'E7' => 'L001020',
    'G7' => 'L100023',
);

sub render (@input) {
    foreach my $input (@input) {
        my @stave;

        if ( $input =~ /^\#\s*(.*)$/xms ) {
            print "$1\n";
            next;
        }

        my @parts = split />/xms, $input;
        add_column(
            \@stave,
            'E|',
            'A|',
            'D|',
            'G|',
            'B|',
            'E|',
        );

        foreach my $part (@parts) {
            if (!$part) {
                add_column( \@stave, map '-', 1 .. 6 );
                next;
            }

            my @note_pairs = split /\+/xms, $part;
            my %notes;

            foreach my $note_pair (@note_pairs) {
                if ( $note_pair =~ /:/xms ) {
                    my ( $string, $note ) = split /:/xms, $note_pair;
                    $notes{$string} = $note;
                    next;
                }

                if ( $CHORDS{$note_pair} ) {
                    $note_pair = $CHORDS{$note_pair};
                }

                if ( $note_pair =~ /^L([0-9x]{6})$/xms ) {
                    my $string = 0;
                    while ( $string++ <= 6 ) {
                        $notes{$string} = substr $note_pair, $string, 1;
                    }
                }
            }

            my $max_length = ( sort { $b <=> $a } map length, values %notes )[0];

            my @rows_to_add;
            foreach my $string ( 1 .. 6 ) {
                my $note = $notes{$string} // '-' x $max_length;
                push @rows_to_add, $note;
            }

            add_column( \@stave, map '-', 1 .. 6 );
            add_column( \@stave, @rows_to_add);
            add_column( \@stave, map '-', 1 .. 6 );
        }

        print_stave(@stave);
        print "\n";
    }
}

sub print_stave (@stave) {
    foreach my $row_idx ( 0 .. $#stave ) {
        print join '', $stave[$row_idx]->@*;
        print "\n";
    }
}

# TODO: Check that all rows have the same length before
sub add_column ( $staveref, @rows) {
    my $idx_to_add = $#{ $staveref->[0] } + 1;

    my $length;
    foreach my $row_idx ( 0 .. $#rows ) {
        my $row = $rows[$row_idx];
        defined $row or die 'Row undefined!';

        $length //= length $row;
        length $row == $length
            or die "Asked to add a row (idx: $idx_to_add) with different length than other row!";

        $staveref->[$row_idx][$idx_to_add] = $row;
    }
}

sub print_help {
    print <<~ "EOS";
    $0 '...'

    Converts from Sawyer's guitar notation to regular tabs

    OPTIONS:

    --help | -h         Print this help menu
    --file | -f FILE    Render the file FILE

    SYNTAX:

    1:3             - 1st string, 3rd fret
    1:3>2:2         - 1st string, 3rd fret, then 2nd string, 2st fret
    1:3>>2:2        - same as above, but with extra space in between
    # Song name...  - Header above the notes listing
    1:3+4:2         - Combination of notes at the same time
    L2320xx         - Alternative to combination of notes
    C>F>B7          - Chords by names
                    (Supported: A/Am/B/Bm/C/Cm/D/Dm/E/Em/F/Fm/G/Gm/A7/B7/D7/E7/G7)
    C+6:3           - Override a chord with whatever notes you want
    2h3             - Hammer on from 2 to 3
    3p2             - Pull-off from 3 to 2
    1:3v            - Vibrate on 3rd fret in 1st string
    1:3~            - Same as above, alternative syntax
    / or \\          - slide up or down, respectively
    EOS

    exit 0;
}

my $filename;
my $input;
GetOptions(
    'help|h'   => sub { print_help(); },
    'file|f=s' => \$filename,
    '<>'       => sub { $input = shift },
);

$input && $filename
    and print_help("Can't use both input and file - choose one");

if ($filename) {
    open my $fh, '<', $filename
        or die "Cannot open '$filename': $!\n";

    chomp( my @input = <$fh> );

    render($_) for grep length, @input;

    close $fh
        or die "Cannot close '$filename': $!\n";
} elsif ($input) {
    render($input);
} else {
    print_help();
}

